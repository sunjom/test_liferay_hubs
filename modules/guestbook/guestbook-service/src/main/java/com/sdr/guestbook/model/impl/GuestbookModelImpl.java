/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.sdr.guestbook.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.sdr.guestbook.model.Guestbook;
import com.sdr.guestbook.model.GuestbookModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Guestbook service. Represents a row in the &quot;sdr_Guestbook&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GuestbookModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GuestbookImpl}.
 * </p>
 *
 * @author devsky
 * @see GuestbookImpl
 * @generated
 */
@JSON(strict = true)
public class GuestbookModelImpl
	extends BaseModelImpl<Guestbook> implements GuestbookModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a guestbook model instance should use the <code>Guestbook</code> interface instead.
	 */
	public static final String TABLE_NAME = "sdr_Guestbook";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"guestbookId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"field1", Types.VARCHAR},
		{"field2", Types.BOOLEAN}, {"field3", Types.INTEGER},
		{"field4", Types.TIMESTAMP}, {"field5", Types.VARCHAR},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("guestbookId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table sdr_Guestbook (uuid_ VARCHAR(75) null,guestbookId LONG not null primary key,name VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table sdr_Guestbook";

	public static final String ORDER_BY_JPQL =
		" ORDER BY guestbook.guestbookId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY sdr_Guestbook.guestbookId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GUESTBOOKID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public GuestbookModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _guestbookId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGuestbookId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _guestbookId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Guestbook.class;
	}

	@Override
	public String getModelClassName() {
		return Guestbook.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Guestbook, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Guestbook, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Guestbook, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Guestbook)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Guestbook, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Guestbook, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Guestbook)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Guestbook, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Guestbook, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Guestbook, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Guestbook, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Guestbook, Object>>();

			attributeGetterFunctions.put("uuid", Guestbook::getUuid);
			attributeGetterFunctions.put(
				"guestbookId", Guestbook::getGuestbookId);
			attributeGetterFunctions.put("name", Guestbook::getName);
			attributeGetterFunctions.put("groupId", Guestbook::getGroupId);
			attributeGetterFunctions.put("companyId", Guestbook::getCompanyId);
			attributeGetterFunctions.put("userId", Guestbook::getUserId);
			attributeGetterFunctions.put("userName", Guestbook::getUserName);
			attributeGetterFunctions.put(
				"createDate", Guestbook::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Guestbook::getModifiedDate);
			attributeGetterFunctions.put("field1", Guestbook::getField1);
			attributeGetterFunctions.put("field2", Guestbook::getField2);
			attributeGetterFunctions.put("field3", Guestbook::getField3);
			attributeGetterFunctions.put("field4", Guestbook::getField4);
			attributeGetterFunctions.put("field5", Guestbook::getField5);
			attributeGetterFunctions.put("status", Guestbook::getStatus);
			attributeGetterFunctions.put(
				"statusByUserId", Guestbook::getStatusByUserId);
			attributeGetterFunctions.put(
				"statusByUserName", Guestbook::getStatusByUserName);
			attributeGetterFunctions.put(
				"statusDate", Guestbook::getStatusDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Guestbook, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Guestbook, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Guestbook, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Guestbook, String>)Guestbook::setUuid);
			attributeSetterBiConsumers.put(
				"guestbookId",
				(BiConsumer<Guestbook, Long>)Guestbook::setGuestbookId);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Guestbook, String>)Guestbook::setName);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Guestbook, Long>)Guestbook::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Guestbook, Long>)Guestbook::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Guestbook, Long>)Guestbook::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Guestbook, String>)Guestbook::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Guestbook, Date>)Guestbook::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Guestbook, Date>)Guestbook::setModifiedDate);
			attributeSetterBiConsumers.put(
				"field1", (BiConsumer<Guestbook, String>)Guestbook::setField1);
			attributeSetterBiConsumers.put(
				"field2", (BiConsumer<Guestbook, Boolean>)Guestbook::setField2);
			attributeSetterBiConsumers.put(
				"field3", (BiConsumer<Guestbook, Integer>)Guestbook::setField3);
			attributeSetterBiConsumers.put(
				"field4", (BiConsumer<Guestbook, Date>)Guestbook::setField4);
			attributeSetterBiConsumers.put(
				"field5", (BiConsumer<Guestbook, String>)Guestbook::setField5);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Guestbook, Integer>)Guestbook::setStatus);
			attributeSetterBiConsumers.put(
				"statusByUserId",
				(BiConsumer<Guestbook, Long>)Guestbook::setStatusByUserId);
			attributeSetterBiConsumers.put(
				"statusByUserName",
				(BiConsumer<Guestbook, String>)Guestbook::setStatusByUserName);
			attributeSetterBiConsumers.put(
				"statusDate",
				(BiConsumer<Guestbook, Date>)Guestbook::setStatusDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getGuestbookId() {
		return _guestbookId;
	}

	@Override
	public void setGuestbookId(long guestbookId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_guestbookId = guestbookId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@JSON
	@Override
	public boolean getField2() {
		return _field2;
	}

	@JSON
	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	@JSON
	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@JSON
	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field4 = field4;
	}

	@JSON
	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Guestbook.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Guestbook.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Guestbook toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Guestbook>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GuestbookImpl guestbookImpl = new GuestbookImpl();

		guestbookImpl.setUuid(getUuid());
		guestbookImpl.setGuestbookId(getGuestbookId());
		guestbookImpl.setName(getName());
		guestbookImpl.setGroupId(getGroupId());
		guestbookImpl.setCompanyId(getCompanyId());
		guestbookImpl.setUserId(getUserId());
		guestbookImpl.setUserName(getUserName());
		guestbookImpl.setCreateDate(getCreateDate());
		guestbookImpl.setModifiedDate(getModifiedDate());
		guestbookImpl.setField1(getField1());
		guestbookImpl.setField2(isField2());
		guestbookImpl.setField3(getField3());
		guestbookImpl.setField4(getField4());
		guestbookImpl.setField5(getField5());
		guestbookImpl.setStatus(getStatus());
		guestbookImpl.setStatusByUserId(getStatusByUserId());
		guestbookImpl.setStatusByUserName(getStatusByUserName());
		guestbookImpl.setStatusDate(getStatusDate());

		guestbookImpl.resetOriginalValues();

		return guestbookImpl;
	}

	@Override
	public Guestbook cloneWithOriginalValues() {
		GuestbookImpl guestbookImpl = new GuestbookImpl();

		guestbookImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		guestbookImpl.setGuestbookId(
			this.<Long>getColumnOriginalValue("guestbookId"));
		guestbookImpl.setName(this.<String>getColumnOriginalValue("name"));
		guestbookImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		guestbookImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		guestbookImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		guestbookImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		guestbookImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		guestbookImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		guestbookImpl.setField1(this.<String>getColumnOriginalValue("field1"));
		guestbookImpl.setField2(this.<Boolean>getColumnOriginalValue("field2"));
		guestbookImpl.setField3(this.<Integer>getColumnOriginalValue("field3"));
		guestbookImpl.setField4(this.<Date>getColumnOriginalValue("field4"));
		guestbookImpl.setField5(this.<String>getColumnOriginalValue("field5"));
		guestbookImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		guestbookImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		guestbookImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		guestbookImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return guestbookImpl;
	}

	@Override
	public int compareTo(Guestbook guestbook) {
		long primaryKey = guestbook.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Guestbook)) {
			return false;
		}

		Guestbook guestbook = (Guestbook)object;

		long primaryKey = guestbook.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Guestbook> toCacheModel() {
		GuestbookCacheModel guestbookCacheModel = new GuestbookCacheModel();

		guestbookCacheModel.uuid = getUuid();

		String uuid = guestbookCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			guestbookCacheModel.uuid = null;
		}

		guestbookCacheModel.guestbookId = getGuestbookId();

		guestbookCacheModel.name = getName();

		String name = guestbookCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			guestbookCacheModel.name = null;
		}

		guestbookCacheModel.groupId = getGroupId();

		guestbookCacheModel.companyId = getCompanyId();

		guestbookCacheModel.userId = getUserId();

		guestbookCacheModel.userName = getUserName();

		String userName = guestbookCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			guestbookCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			guestbookCacheModel.createDate = createDate.getTime();
		}
		else {
			guestbookCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			guestbookCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			guestbookCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		guestbookCacheModel.field1 = getField1();

		String field1 = guestbookCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			guestbookCacheModel.field1 = null;
		}

		guestbookCacheModel.field2 = isField2();

		guestbookCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			guestbookCacheModel.field4 = field4.getTime();
		}
		else {
			guestbookCacheModel.field4 = Long.MIN_VALUE;
		}

		guestbookCacheModel.field5 = getField5();

		String field5 = guestbookCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			guestbookCacheModel.field5 = null;
		}

		guestbookCacheModel.status = getStatus();

		guestbookCacheModel.statusByUserId = getStatusByUserId();

		guestbookCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = guestbookCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			guestbookCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			guestbookCacheModel.statusDate = statusDate.getTime();
		}
		else {
			guestbookCacheModel.statusDate = Long.MIN_VALUE;
		}

		return guestbookCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Guestbook, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Guestbook, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Guestbook, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Guestbook)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Guestbook>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Guestbook.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _guestbookId;
	private String _name;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private Date _field4;
	private String _field5;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Guestbook, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Guestbook)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("guestbookId", _guestbookId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("field4", _field4);
		_columnOriginalValues.put("field5", _field5);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("guestbookId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("field1", 512L);

		columnBitmasks.put("field2", 1024L);

		columnBitmasks.put("field3", 2048L);

		columnBitmasks.put("field4", 4096L);

		columnBitmasks.put("field5", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("statusByUserId", 32768L);

		columnBitmasks.put("statusByUserName", 65536L);

		columnBitmasks.put("statusDate", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Guestbook _escapedModel;

}